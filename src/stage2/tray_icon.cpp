#include "tray_icon.h"
#include <array>

// forward declaration for the icon data
extern std::array<BYTE, 588> icon_data;

LRESULT CALLBACK WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
    case WM_CREATE: {
        // save the tray icon pointer in the window data
        CREATESTRUCTW* create_struct = (CREATESTRUCTW*)lParam;
        SetWindowLongPtrW(hwnd, GWLP_USERDATA, (LONG_PTR)create_struct->lpCreateParams);

        TrayIcon* tray_icon = (TrayIcon*)create_struct->lpCreateParams;
        tray_icon->create_icon(hwnd);
        break;
    }
    case WM_USER + 1: {
        TrayIcon* tray_icon = (TrayIcon*)GetWindowLongPtrW(hwnd, GWLP_USERDATA);
        if (lParam == WM_LBUTTONDOWN)
            tray_icon->cancel_wait();
        break;
    }
    case WM_USER + 2: {
        TrayIcon* tray_icon = (TrayIcon*)GetWindowLongPtrW(hwnd, GWLP_USERDATA);
        tray_icon->set_icon_message((LPCWSTR)lParam);
        break;
    }
    case WM_DESTROY: {
        TrayIcon* tray_icon = (TrayIcon*)GetWindowLongPtrW(hwnd, GWLP_USERDATA);
        tray_icon->destroy_icon();
        PostQuitMessage(0);
        break;
    }
    default:
        return DefWindowProcW(hwnd, msg, wParam, lParam);
    }
    return 0;
}

TrayIcon::TrayIcon(std::wstring name) : name(name) {
    hInstance = GetModuleHandle(NULL);
    // create the cancel event
    hCancelEvent = CreateEventW(NULL, TRUE, FALSE, NULL);

    // randomize the window class name
    srand(GetTickCount64());
    for (int i = 0; i < 16; i++)
        window_class_name += (wchar_t)(L'A' + rand() % 26);
    
    // start the tray icon message loop in a new thread
    HANDLE hThread = CreateThread(NULL, 0, [](LPVOID lpParam) -> DWORD {
        TrayIcon* tray_icon = (TrayIcon*)lpParam;

        // Register the window class
        WNDCLASSEXW wc = {};
        wc.cbSize = sizeof(WNDCLASSEXW);
        wc.lpfnWndProc = WindowProc;
        wc.hInstance = tray_icon->hInstance;
        wc.lpszClassName = tray_icon->window_class_name.c_str();
        RegisterClassExW(&wc);

        // Create the window (it won't be visible)
        tray_icon->hwnd = CreateWindowExW(0, wc.lpszClassName, L"", 0, 0, 0, 0, 0, NULL, NULL, tray_icon->hInstance, lpParam);
        if (tray_icon->hwnd == NULL)
            return 1;

        // signal that the window has been created
        SetEvent(tray_icon->hCancelEvent);

        // Message loop
        MSG msg = {};
        while (GetMessageW(&msg, NULL, 0, 0)) {
            TranslateMessage(&msg);
            DispatchMessageW(&msg);
        }

        // unregister the window class
        UnregisterClassW(tray_icon->window_class_name.c_str(), tray_icon->hInstance);

        return (DWORD)msg.wParam;
    }, this, 0, NULL);

    // wait for the window to be created or for the thread to exit
    HANDLE handles[2] = { hCancelEvent, hThread };
    DWORD wait_result = WaitForMultipleObjects(2, handles, FALSE, INFINITE);
    CloseHandle(hThread);
    ResetEvent(hCancelEvent);

    if (wait_result != WAIT_OBJECT_0) {
        // the thread exited, so we failed to create the window
        hwnd = NULL;
    }
}

TrayIcon::~TrayIcon() {
    destroy();
}

void TrayIcon::destroy() {
    CloseHandle(hCancelEvent);
    if (hwnd != NULL)
        PostMessageW(hwnd, WM_CLOSE, 0, 0);
}

void TrayIcon::create_icon(HWND hwnd) {
    HICON hIcon = CreateIconFromResourceEx(icon_data.data(), icon_data.size(), TRUE, 0x00030000, 0, 0, LR_DEFAULTCOLOR);
    if (hIcon == NULL)
        return;

    NOTIFYICONDATAW nid = {};
    nid.cbSize = sizeof(NOTIFYICONDATAW);
    nid.hWnd = hwnd;
    nid.uID = uID;
    nid.uFlags = NIF_ICON | NIF_TIP | NIF_MESSAGE;
    nid.uCallbackMessage = WM_USER + 1;
    nid.hIcon = hIcon;
    wcscpy_s(nid.szTip, name.c_str());
    Shell_NotifyIconW(NIM_ADD, &nid);
}

void TrayIcon::destroy_icon() {
    NOTIFYICONDATAW nid = {};
    nid.cbSize = sizeof(NOTIFYICONDATAW);
    nid.hWnd = hwnd;
    nid.uID = uID;
    Shell_NotifyIconW(NIM_DELETE, &nid);
}

void TrayIcon::set_icon_message(LPCWSTR lpMessage) {
    std::wstring tooltip = name;
    if (lpMessage != NULL)
        tooltip += L"\n" + std::wstring(lpMessage);

    NOTIFYICONDATAW nid = {};
    nid.cbSize = sizeof(NOTIFYICONDATAW);
    nid.hWnd = hwnd;
    nid.uID = uID;
    nid.uFlags = NIF_TIP;
    wcscpy_s(nid.szTip, tooltip.c_str());
    Shell_NotifyIconW(NIM_MODIFY, &nid);
}

void TrayIcon::clear_notification() {
    NOTIFYICONDATAW nid = {};
    nid.cbSize = sizeof(NOTIFYICONDATAW);
    nid.hWnd = hwnd;
    nid.uID = uID;
    nid.uFlags = NIF_INFO;
    Shell_NotifyIconW(NIM_MODIFY, &nid);
}

void TrayIcon::send_notification(LPCWSTR lpMessage) {
    NOTIFYICONDATAW nid = {};
    nid.cbSize = sizeof(NOTIFYICONDATAW);
    nid.hWnd = hwnd;
    nid.uID = uID;
    nid.uFlags = NIF_INFO;
    wcscpy_s(nid.szInfo, lpMessage);
    wcscpy_s(nid.szInfoTitle, name.c_str());
    Shell_NotifyIconW(NIM_MODIFY, &nid);
}

void TrayIcon::cancel_wait() {
    // signal the cancel event
    SetEvent(hCancelEvent);
}

// this function waits for an object to be signaled or for the user to click on the tray icon that will cancel the wait using WaitForMultipleObjects
DWORD TrayIcon::wait_for_object(HANDLE hHandle, DWORD dwMilliseconds, LPCWSTR lpMessage) {
    // reset the cancel event
    ResetEvent(hCancelEvent);

    // set tray icon tooltip
    std::wstring message = std::wstring(lpMessage) + L"\nClick to cancel";
    PostMessageW(hwnd, WM_USER + 2, 0, (LPARAM)message.c_str());

    // wait for the object to be signaled or for the cancel event to be signaled
    HANDLE handles[2] = { hHandle, hCancelEvent };
    DWORD wait_result = WaitForMultipleObjects(2, handles, FALSE, dwMilliseconds);

    // reset the tray icon tooltip
    PostMessageW(hwnd, WM_USER + 2, 0, (LPARAM)NULL);

    return wait_result;
}

// credit: https://www.pixiv.net/en/artworks/35678304
std::array<BYTE, 588> icon_data = {
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
	0x08, 0x06, 0x00, 0x00, 0x00, 0x1F, 0xF3, 0xFF, 0x61, 0x00, 0x00, 0x02,
	0x13, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8D, 0x75, 0x93, 0x4F, 0x48, 0x93,
	0x61, 0x1C, 0xC7, 0x3F, 0x6F, 0x86, 0x90, 0x50, 0xD0, 0x14, 0x1B, 0xEF,
	0xD8, 0x96, 0x10, 0x8B, 0xE1, 0xE5, 0x15, 0xB6, 0xAC, 0x76, 0x58, 0x12,
	0x0C, 0x07, 0x03, 0xC3, 0x18, 0xCE, 0x53, 0x78, 0xC9, 0x6E, 0x21, 0x78,
	0x90, 0xBA, 0xBC, 0x05, 0x75, 0x69, 0x20, 0x81, 0x87, 0xD5, 0xC1, 0xB0,
	0x93, 0x30, 0xC3, 0xA2, 0xE1, 0x20, 0x26, 0xEC, 0x64, 0x5B, 0x1B, 0xEC,
	0x39, 0x28, 0x4E, 0x3B, 0xC4, 0x16, 0x0E, 0x32, 0x6C, 0x0E, 0xC1, 0xC3,
	0x7B, 0x79, 0x3A, 0xD8, 0x5E, 0x7D, 0x5F, 0xF3, 0x0B, 0x0F, 0x3C, 0x7F,
	0x7E, 0xDF, 0xDF, 0xF3, 0x7C, 0xBF, 0xBF, 0xDF, 0xA3, 0x68, 0xC0, 0x9B,
	0xE2, 0x4F, 0xE9, 0x78, 0xF9, 0x98, 0x93, 0xC8, 0x94, 0xCB, 0x2C, 0xEC,
	0xD4, 0x95, 0x07, 0x2E, 0x8F, 0x8C, 0x05, 0x02, 0x96, 0xB3, 0x3F, 0x4F,
	0x5E, 0x33, 0x39, 0xE8, 0x56, 0x00, 0x14, 0x0D, 0xF8, 0x66, 0x18, 0xB2,
	0x16, 0x4F, 0x90, 0x29, 0x97, 0x01, 0xB8, 0x1C, 0xB9, 0x85, 0x1D, 0xCD,
	0x2F, 0x5F, 0x01, 0x88, 0x05, 0x02, 0x78, 0xD3, 0x8B, 0xDC, 0xE8, 0xEC,
	0x54, 0x00, 0x3A, 0x9C, 0xC0, 0xEF, 0x0E, 0xB7, 0x5E, 0xCF, 0x2C, 0x52,
	0xEB, 0xBD, 0x40, 0x5F, 0x28, 0x88, 0x10, 0x02, 0xA7, 0xD3, 0x69, 0x92,
	0x85, 0x10, 0xF4, 0x85, 0x82, 0x6C, 0x1D, 0xEC, 0xB1, 0xFB, 0xBD, 0x4E,
	0xEE, 0xF0, 0x12, 0xD5, 0xFC, 0xE7, 0x67, 0xE6, 0x0B, 0xF8, 0x27, 0x63,
	0x33, 0x35, 0x8D, 0x10, 0x02, 0x4D, 0xD3, 0xB0, 0xA3, 0xBD, 0xEF, 0x7F,
	0x94, 0x34, 0x9F, 0x0F, 0x70, 0xAE, 0x3D, 0x99, 0x1C, 0x74, 0x2B, 0xED,
	0xA0, 0xB0, 0xB7, 0x89, 0x10, 0xC2, 0x24, 0x86, 0xBD, 0x4D, 0x34, 0x4D,
	0x43, 0x08, 0x61, 0x21, 0x5B, 0x12, 0x00, 0x72, 0x3C, 0x95, 0x23, 0xEC,
	0x6D, 0x32, 0xB6, 0xB2, 0xCF, 0xCC, 0xD4, 0x10, 0x42, 0x08, 0x66, 0xA6,
	0x86, 0x18, 0x5B, 0xD9, 0x27, 0xEC, 0x6D, 0x32, 0x9E, 0xCA, 0x01, 0xC8,
	0xB3, 0x12, 0xB0, 0x36, 0x1A, 0xC2, 0x31, 0x9C, 0x00, 0xA0, 0x7B, 0x64,
	0x82, 0x57, 0xF9, 0xF7, 0x74, 0x8F, 0x4C, 0x00, 0xE0, 0x18, 0x4E, 0xB0,
	0x36, 0x1A, 0x3A, 0x25, 0xCD, 0x92, 0x20, 0x16, 0x08, 0xD0, 0xE5, 0xEF,
	0x3F, 0x15, 0x04, 0xD0, 0xE5, 0xEF, 0xC7, 0x5E, 0x4E, 0x38, 0x61, 0x22,
	0x1C, 0x97, 0xF3, 0xE2, 0xFD, 0x5E, 0xF3, 0x66, 0x80, 0xBD, 0x4F, 0xEF,
	0x38, 0xF8, 0xB0, 0x6B, 0x29, 0x9F, 0x09, 0xCD, 0x3A, 0x64, 0xAB, 0x30,
	0x2F, 0x67, 0x5D, 0x1E, 0x69, 0x18, 0x86, 0xFC, 0xA1, 0x47, 0xA4, 0x61,
	0x18, 0x72, 0xD6, 0xE5, 0x91, 0xAD, 0xC2, 0xBC, 0xD4, 0x40, 0xDA, 0xE2,
	0x8F, 0x25, 0x2C, 0xEB, 0x11, 0x59, 0x6A, 0x15, 0x59, 0x4D, 0xEA, 0x00,
	0xD4, 0xE2, 0x09, 0xAE, 0x3E, 0xF4, 0x50, 0x8B, 0x1F, 0x79, 0xB2, 0x9A,
	0xD4, 0x29, 0xB5, 0x8A, 0x2C, 0xEB, 0x11, 0x8B, 0x89, 0xE7, 0xDB, 0x93,
	0xCA, 0x7A, 0x15, 0xC7, 0xE6, 0x06, 0xCF, 0x97, 0xEA, 0x00, 0xF8, 0x54,
	0x95, 0x6B, 0x38, 0xD8, 0x6E, 0x34, 0x58, 0xD8, 0xA9, 0xC3, 0x12, 0xDC,
	0x9D, 0xDE, 0xA0, 0xB2, 0x5E, 0x3D, 0xD3, 0x03, 0xF9, 0x22, 0x78, 0x93,
	0xED, 0x46, 0xE3, 0xBF, 0x66, 0x65, 0xCA, 0x65, 0x7C, 0xAA, 0xCA, 0xD3,
	0x52, 0x01, 0xE0, 0x74, 0x23, 0x01, 0x4A, 0xCF, 0x5C, 0x1A, 0x9F, 0xAA,
	0x9A, 0x7F, 0xC2, 0x4E, 0xEE, 0x99, 0x4B, 0x5B, 0xC8, 0x16, 0x09, 0x70,
	0xD4, 0x8D, 0xF7, 0xF4, 0xB7, 0x32, 0x1A, 0x8D, 0xE2, 0x1D, 0xB8, 0x62,
	0xEE, 0xDF, 0xAE, 0xFC, 0x22, 0x9B, 0xCD, 0xF2, 0xD1, 0xD6, 0x85, 0x76,
	0x09, 0xA6, 0x94, 0x3B, 0x03, 0xD7, 0xC9, 0x57, 0xB6, 0xDA, 0xB7, 0xD9,
	0xD7, 0x16, 0xFC, 0x05, 0xF8, 0xB0, 0xD2, 0x53, 0xA7, 0x42, 0x1B, 0x26,
	0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
};
